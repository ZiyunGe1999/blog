<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>随机初始化单位向量</title>
    <url>/blog/2020/08/30/randomInitializationVector/</url>
    <content><![CDATA[<p>在改MVS的一些算法当中，随机初始化是一个非常常用的步骤。在基于patch match的mvs算法中，需要去构造一个深度平面，这个平面由深度以及平面单位法向量构成。在随机初始化这个平面单位法向量的时候，碰到了一些很有趣的问题以及一些思考，在此以做记录。</p>
<h1 id="一种错误想法"><a href="#一种错误想法" class="headerlink" title="一种错误想法"></a>一种错误想法</h1><p>我相信一拿到这个问题的时候，许多人跟我一样可能会这样做，分别随机在-1到1之间sample出法向量的x，y，z值，然后为了满足单位长度的要求再除以向量的模长。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::random_device rd;</span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dis</span><span class="params">(<span class="number">-1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//get x y z of a vector</span></span><br><span class="line"><span class="keyword">double</span> x = dis(rng);</span><br><span class="line"><span class="keyword">double</span> y = dis(rng);</span><br><span class="line"><span class="keyword">double</span> z = dis(rng);</span><br><span class="line"><span class="keyword">double</span> norm = <span class="built_in">sqrt</span>(x*x + y*y + z*z);</span><br><span class="line">x /= norm;</span><br><span class="line">y /= norm;</span><br><span class="line">z /= norm;</span><br></pre></td></tr></table></figure>

<p>但是稍加思索其实就会发觉这个想法其实是错误的，在独立随机三个坐标值时，其实是在一个以原点为中心的一个2*2*2的立方体中随机取点，这个点在这个立方体里的分布是均匀的，紧接着再将这个点投影到以原点为中心，半径为1的单位球面上。显然这样的投影是不均匀的，因为这个单位球和立方体相切，立方体除了这个单位球还多了四个边角的空间。虽然这个方法不正确，但是我们先画出这种方法最后出来的三坐标分量的概率分布，以下是用用上述方法取了10000个点，三坐标分量的分布直方图</p>
<table>
<thead>
<tr>
<th align="center">x分量</th>
<th align="center">y分量</th>
<th align="center">z分量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi92simvouj20x60pwmyc.jpg" width="400px"/></td>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi92szlc58j20wi0pqmyc.jpg" width="400px"/></td>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi92tk8bqlj20wy0paab8.jpg" width="400px"/></td>
</tr>
</tbody></table>
<p>我们可以看到，三个坐标分量的分布都是一样的，但是经过我们这么折腾，原来均匀分布的变量就变成了非均匀分布。</p>
<h1 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h1><p>那么如何去实现呢，其实在前文当中答案已经呼之欲出了，既然我们知道问题在于多出来的四个角，那我们直接把它去掉不就行了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::random_device rd;</span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dis</span><span class="params">(<span class="number">-1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//get x y z of a vector</span></span><br><span class="line"><span class="keyword">double</span> x = dis(rng);</span><br><span class="line"><span class="keyword">double</span> y = dis(rng);</span><br><span class="line"><span class="keyword">double</span> z = dis(rng);</span><br><span class="line"><span class="keyword">double</span> norm = <span class="built_in">sqrt</span>(x*x + y*y + z*z);</span><br><span class="line"><span class="keyword">while</span>(norm &gt; <span class="number">1</span>)&#123;</span><br><span class="line">  x = dis(rng); y = dis(rng); z = dis(rng);</span><br><span class="line">  norm = <span class="built_in">sqrt</span>(x*x + y*y + z*z);</span><br><span class="line">&#125;</span><br><span class="line">x /= norm;</span><br><span class="line">y /= norm;</span><br><span class="line">z /= norm;</span><br></pre></td></tr></table></figure>

<p>下面是按照这种方法的三坐标分量的分布直方图</p>
<table>
<thead>
<tr>
<th align="center">x分量</th>
<th align="center">y分量</th>
<th align="center">z分量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi93aegwsfj20x20p83zl.jpg" width="400px"/></td>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi93apo1bij20wi0pugmp.jpg" width="400px"/></td>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi93b44a2fj20ws0q2dgx.jpg" width="400px"/></td>
</tr>
</tbody></table>
<p>居然是均匀分布，也就是说我们初始的想法是对的，这样一个随机分布的向量，三个分量确实也是均匀分布的。这一点也可以用微积分证明。在计算球体表面积时，有以下过程，计算的是一个单位圆（半圆）绕x轴扫过的面积</p>
<img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi94nsb1onj216212ojv1.jpg" width="400px"/>

<p>即球体的表面积可以表示为<br>$$<br>S = \int 2\pi y\sqrt{\Delta x^2 + \Delta y^2} \\<br>S = 2\pi \int_{r}^{r} \sqrt{r^2 - x^2} \sqrt{1 + \frac{\Delta y^2}{\Delta x^2}} dx<br>$$</p>
<p>由$x$和$y$之间的关系$y = \sqrt{r^2-x^2}$可得，$\frac{\Delta y}{\Delta x} = \frac{-x}{\sqrt{r^2 - x^2}}$，将其带入上式可得<br>$$S = 2\pi \int_{-r}^{r} \sqrt{r^2 - x^2} \sqrt{1 + \frac{x^2}{r^2-x^2}} dx \\ S = 2\pi \int_{-r}^{r} r dx$$<br>所以可以看出这个积分其实跟$x$没有关系，换句话说，在$x$的任一取值下，$\Delta x$囊括的球面积都是一样的，所以各个指向均匀分布的单位向量，其三坐标是在-1到1之间均匀分布的。</p>
<h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="高斯分布构造"><a href="#高斯分布构造" class="headerlink" title="高斯分布构造"></a>高斯分布构造</h2><p>和前面的方法差不多的想法，只是这次我们用标准高斯分布（正态分布）来构造三个坐标分量，这样构造出来的点在空间中的状态就类似于电子云，以原点是中心对称的。不过好处在于，这次不用像前述方法去掉在单位球以外的点。接着就和前述一样，将随机出来的点投影到单位球面上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::normal_distribution&lt;&gt; dist; <span class="comment">// mu: 0 sigma: 1</span></span><br><span class="line"><span class="built_in">std</span>::random_device rd;</span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;;</span><br><span class="line">plane-&gt;x = <span class="number">1.0f</span> * dist(rng);</span><br><span class="line">plane-&gt;y = <span class="number">1.0f</span> * dist(rng);</span><br><span class="line">plane-&gt;z = <span class="number">1.0f</span> * dist(rng);</span><br><span class="line"><span class="keyword">float</span> norm = sqrtf(plane-&gt;x * plane-&gt;x + plane-&gt;y * plane-&gt;y + plane-&gt;z * plane-&gt;z);</span><br><span class="line">plane-&gt;x = plane-&gt;x / norm;</span><br><span class="line">plane-&gt;y = plane-&gt;y / norm;</span><br><span class="line">plane-&gt;z = plane-&gt;z / norm;</span><br></pre></td></tr></table></figure>

<h2 id="Marsaglia方法"><a href="#Marsaglia方法" class="headerlink" title="Marsaglia方法"></a>Marsaglia方法</h2><p>这种方法较为tricky，我暂时没有想明白具体的数学原理，在这留个坑，希望以后能补上。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> q1, q2, S = <span class="number">2.f</span>;</span><br><span class="line"><span class="keyword">while</span> (S &gt;= <span class="number">1.0f</span>) &#123;</span><br><span class="line">	q1 = curand_between(ls, <span class="number">-1.0f</span>, <span class="number">1.0f</span>); <span class="comment">//一个cuda的随机取值函数，这里是随机从-1到1取值，意会就好不用在意细节</span></span><br><span class="line">  q2 = curand_between(ls, <span class="number">-1.0f</span>, <span class="number">1.0f</span>); </span><br><span class="line">  S = q1 * q1 + q2 * q2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> sq = sqrtf(<span class="number">1.0f</span> - S);</span><br><span class="line">plane-&gt;x = <span class="number">2.0f</span> * q1 * sq;</span><br><span class="line">plane-&gt;y = <span class="number">2.0f</span> * q2 * sq;</span><br><span class="line">plane-&gt;z = <span class="number">1.0f</span> - <span class="number">2.0f</span> * S;</span><br></pre></td></tr></table></figure>

<h1 id="其他错误的尝试"><a href="#其他错误的尝试" class="headerlink" title="其他错误的尝试"></a>其他错误的尝试</h1><h2 id="随机取值两个欧拉角构造向量"><a href="#随机取值两个欧拉角构造向量" class="headerlink" title="随机取值两个欧拉角构造向量"></a>随机取值两个欧拉角构造向量</h2><p>在得到上述正解之前，其实还误碰了一些错误的构造方式，放在这里以提醒。</p>
<p>在单位球上的向量，自然而然会想到用欧拉角来构造，去掉一个没用的row角，剩下的pitch和yaw角就够用了。两个角度分别用alpha和beta来表示，如示意图，alpha的取值范围是$(0,2\pi)$，beta的取值范围是$(-\frac{\pi}{2},\frac{\pi}{2})$。</p>
<img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi40p2yahfj21ay15agrr.jpg" width="400px" />

<p>那么这个单位向量就构造出来了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> Alpha, Beta;</span><br><span class="line">Alpha = curand_between(ls, <span class="number">0f</span>, <span class="number">2</span>*M_PI);</span><br><span class="line">Beta = curand_between(ls, -M_PI/<span class="number">2.0f</span>, M_PI/<span class="number">2.0f</span>);</span><br><span class="line">plane-&gt;x = <span class="number">1.0f</span> * <span class="built_in">cos</span>(Beta) * <span class="built_in">sin</span>(Alpha);</span><br><span class="line">plane-&gt;y = <span class="number">1.0f</span> * <span class="built_in">cos</span>(Beta) * <span class="built_in">cos</span>(Alpha);</span><br><span class="line">plane-&gt;z = <span class="number">1.0f</span> * <span class="built_in">sin</span>(Beta);</span><br></pre></td></tr></table></figure>

<p>首先，从结果上看，得出来的三坐标分量就是错误的</p>
<table>
<thead>
<tr>
<th align="center">x分量</th>
<th align="center">y分量</th>
<th align="center">z分量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi9c2glffxj20wy0pomyg.jpg" width="400px"/></td>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi9c2rnv96j20ws0pwmyg.jpg" width="400px"/></td>
<td align="center"><img src="http://ww1.sinaimg.cn/large/c3b45047ly1gi9c39g1ayj20wo0q6759.jpg" width="400px"/></td>
</tr>
</tbody></table>
<p>其次，还是可以通过确认单位alpha单位beta围的面积是否是不变的，来确认这样的取值是能够构造指向均匀分布的单位向量。答案是否定的，可以很清楚地看到，当alpha固定，beta越靠近0，$\Delta alpha, \Delta beta$围的面积越大。</p>
]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>mvs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用均匀分布构造正态分布</title>
    <url>/blog/2020/09/06/constructNormalDistribution/</url>
    <content><![CDATA[<p>这篇文章的问题来源于博客的<a href="https://ziyunge1999.github.io/blog/2020/08/30/randomInitializationVector/">随机初始化单位向量</a>，实际上那篇文章也是在用均匀分布去构造另一种分布。在搜集那篇文章的答案的时候，碰到了“如何用均匀分布构造正态分布”的问题，觉得很有代表性，就记录了下来。</p>
<h1 id="Inverse-Transform-Method-逆变换方法"><a href="#Inverse-Transform-Method-逆变换方法" class="headerlink" title="Inverse Transform Method - 逆变换方法"></a>Inverse Transform Method - 逆变换方法</h1><p>先抛开构造具体的正态分布这个议题，我们先来看看用均匀分布去构造其他分布的一种较为通用的方法。当我们知道了要构造的目标分布的密度函数$f_{X}(x)$，如果你可以求出它的累积分布函数（Cumulative Distribution Function-CFD）$F_{X}(x)$，那么我们就可以用0到1之间的一个均匀分布变量$U(0,1)$去构造这个目标分布。先求出累积分布函数的逆函数，再将均匀分布作为变量输入该逆函数，即$F^{-1}_{X}(U)$，输出就遵循要构造的目标分布了。</p>
<p>这个证明也非常简单，要证明两个随机变量是同分布的，最直接的办法就是证明他们的累积分布函数是相同的。假设随机变量$X$是目标分布，那么就要证明随机变量$Y=F_{X}^{-1}(U)$的累积分布函数也是$F_{X}$。变量$Y$的累积分布函数$F_{Y}$可以写为</p>
<p>$$<br>F_{Y}(x) = P(Y&lt;x) \\<br>F_{Y}(x) = P(F^{-1}_{X}(U)&lt;x)<br>$$</p>
<p>对于不等式$F_{X}^{-1}(U)&lt;x$因为累积分布函数（注意不是概率密度函数）一定是单调递增的，所以这个不等式两边代入$F_{X}(x)$，不等号的方向还是一样的，即</p>
<p>$$<br>F_{X}(F_{X}^{-1}(U)) &lt; F_{X}(x)\\<br>U &lt; F_X(x)<br>$$</p>
<p>所以$F_Y(x)$就可以写为</p>
<p>$$<br>F_Y(x) = P(U&lt;F_X(x))<br>$$</p>
<p>这里的$U$是0到1上的均匀分布，那么$U$小于$F_{X}(x)$的概率就为$(F_X(x)-0)*1$，即表明<br>$$<br>F_Y(x) = F_{X}(x)<br>$$<br>也就是说这两个随机变量的的累积分布函数是一样的，即这两个随机变量是同分布的。</p>
<p>举个例子，假设要构造一个随机变量服从概率密度函数$f_{X}(x) = x^2(x\in(0,\sqrt[3]{3}))$，步骤如下</p>
<ul>
<li>求出累积分布函数$F_{X}(x) = \frac{1}{3}x^3(x\in(0,\sqrt[3]3))$</li>
<li>求出累积分布函数的逆函数为$F_{X}^{-1} = (3x)^{-3}$</li>
<li>用一个0到1的均匀分布的随机变量$U(0,1)$，则变量$(3U)^{-3}$就会服从目标分布</li>
</ul>
<p>代码段如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::uniform_real_distribution&lt;&gt; values &#123;<span class="number">0.0</span>, <span class="number">1.0</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::random_device rd; </span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;; </span><br><span class="line"><span class="keyword">double</span> X = <span class="built_in">pow</span>((<span class="number">3</span> * values(rng)), <span class="number">-3</span>);</span><br></pre></td></tr></table></figure>

<h1 id="构造正态分布变量"><a href="#构造正态分布变量" class="headerlink" title="构造正态分布变量"></a>构造正态分布变量</h1><p>在我搜集到的资料当中，一般有三种方法，分别是The Box–Muller transform，以及它的改良版Marsaglia polar method，还有一种The Ziggurat algorithm。这里主要介绍前两种，因为跟前面介绍的逆变换方法有关。</p>
<h2 id="The-Box–Muller-transform"><a href="#The-Box–Muller-transform" class="headerlink" title="The Box–Muller transform"></a>The Box–Muller transform</h2><p>标准正态分布的概率密度函数为$f(x) = \frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}$，这个函数直接去积分求它的累积分布函数是比较麻烦的，但是我们可以同时构造两个互相独立的标准正态分布变量。比如要构造两个独立的标准正态分布变量$X$和$Y$，那么这两个随机变量的联合概率密度函数$f(x,y)$即为<br>$$<br>f(x,y) = \frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}} *\frac{1}{\sqrt{2\pi}} e^{-\frac{y^2}{2}}\\<br>f(x,y) = \frac{1}{2\pi}e^{-\frac{x^2+y^2}{2}}<br>$$<br>这个联合分布的累积分布函数是好求的，那么它的积分（$I^2$）就为<br>$$<br>\iint_{-\infty} ^{+\infty}\frac{1}{2\pi} e^{-\frac{x^2+y^2}{2}} dxdy<br>$$<br>这是在笛卡尔直角坐标系下的表达，可以转成极坐标下的表达（注意$dxdy$是和$rdrd\theta$等价的，不要忘了那个$r$，忘记的可以看看雅可比矩阵）<br>$$<br>I^{2} = \iint \frac{1}{2\pi}e^{-\frac{r^2}{2}}*rdrd\theta<br>$$<br>我们可以看出，这个被积分函数是跟$\theta$没关系的，也就是说$\theta$和$r$是也是独立的，上述分布可以写成<br>$$<br>I^2 = \int_{0}^{2\pi}\frac{1}{2\pi}d\theta * \int_{0}^{+\infty}re^{-\frac{r^2}{2}}dr<br>$$<br>左边关于$\theta$很好解决，右边的关于$r$单独拿出来，这个原函数也是可以求出来的，这两个变量的累积分布函数即为<br>$$<br>F_R(r) = 1-e^{-\frac{r^2}{2}} \quad r\in(0,+\infty) \\<br>F_{\Theta}(\theta) = \frac{\theta}{2\pi} \quad \theta\in(0,2\pi)<br>$$<br>根据前面说的逆变换方法，这两个变量是可以通过两个0到1的随机变量$U_1$和$U_2$构造出来的，求出上述两个分布函数的逆函数，再代入$U_1$和$U_2$，即可以得到$R$跟$\Theta$两个随机变量<br>$$<br>R = \sqrt{-2\ln(1-U_1)} \\<br>\Theta = 2\pi U_2<br>$$<br>注意我们是要构造$X$和$Y$这两个随机变量，极坐标系跟笛卡尔直角坐标系有如下转换关系<br>$$<br>X = R * \cos(\Theta) \\<br>Y = R * \sin(\Theta)<br>$$<br>即<br>$$<br>X = \sqrt{-2\ln(1-U_1)}*\cos(2\pi U_2) \\<br>Y = \sqrt{-2\ln(1-U_1)}*\sin(2\pi U_2)<br>$$<br>其中因为$U_1$是均匀分布的，也就是说$1-U_1$也是均匀分布，所以可以直接用$U_1$替代，即简化为<br>$$<br>X = \sqrt{-2\ln U_1}*\cos(2\pi U_2) \\<br>Y = \sqrt{-2\ln U_1}*\sin(2\pi U_2)<br>$$</p>
<h2 id="Marsaglia-polar-method"><a href="#Marsaglia-polar-method" class="headerlink" title="Marsaglia polar method"></a>Marsaglia polar method</h2><p>上述的方法还是要计算三角函数，在Marsaglia polar method里就可以略去这个过程。</p>
<p>其实主要问题在这两个三角函数，这是我们不希望有的，那么有没有一种变量的分布刚好是$\cos(2\pi U_2)$或者$\sin(2\pi U_2)$这样的分布呢，可能你的第一想法还是用逆变换方法去做，但是会马上意识到，这样做会陷入一种三角函数的循环。那我们来试一试，假设你要构造的变量是$K=\cos(2\pi U_2)$，那么它的累积分布函数为<br>$$<br>F_K(k) = P(\cos(2\pi U_2)&lt;k)<br>$$<br>如图所示</p>
<img src="http://ww1.sinaimg.cn/large/c3b45047ly1gihe5iypgmj212k0ysjva.jpg" width="400px"/>

<p>则上述等式可写为<br>$$<br>F_K(k) = \frac{2\pi - 2\cos^{-1}(k)}{2\pi}<br>$$<br>这个函数的反函数依然是三角函数，并没有产生什么实质性的变化，所以继续用逆函数变换方法去做是取消不掉三角函数的运算的。</p>
<p>Marsaglia polar method是先产生两个在-1到1之间的均匀分布的变量$U_3 U_4$，这样的话在坐标系中就是一个边长为2的正方形，紧接着再剔除那些落在单位圆之外的点，这样就得到了一个在单位圆内均匀分布的点。在这个单位圆内，存在一个均匀分布的变量（注意这个时候的横纵坐标由于筛选，并不服从均匀分布了），那就是极角，这一点很好理解。这个均匀分布极角有个很好的特性，就是它的三角函数值是可以用横纵坐标，也就是之前随机出来的两个变量表示出来。注意这时候的$U_3 U_4$只是为了表示变量值，他们已经失去了均匀分布的特性<br>$$<br>\cos(2\pi U_2) = \cos(\Theta) = \frac{U_3}{\sqrt{U_3^2+U_4^2}}\\<br>\sin(2\pi U_2) = \sin(\Theta) = \frac{U_4}{\sqrt{U_3^2+U_4^2}}<br>$$<br>其实到这里我们已经解决了要计算三角函数的问题，但是我们用了三个均匀分布的变量，即$U_1 U_3 U_4$（$U_1$是0到1的均匀分布，$U_3U_4$是-1到1的均匀分布），这不是我们想要的，那么上面构造出来的单位圆里面，还存不存在一个在0到1之间均匀分布而且相对于$\Theta$独立的变量呢？其实还是有的，就是点的到原点距离的平方$S = U_3^2 + U_4^2$，且$S$跟极角$\Theta$也是独立的。</p>
<p>同样的考虑积分（因为在单位圆里均匀分布，所以被积函数是一个常数$\frac{1}{\pi}$，单位圆面积的倒数），根据雅可比矩阵<br>$$<br>\iint \frac{1}{\pi}dxdy = \frac{1}{\pi}\iint rdrd\theta\\<br>\iint \frac{1}{\pi}dxdy = \frac{1}{\pi}\iint \frac{1}{2}dr^2d\theta \\<br>\iint \frac{1}{\pi}dxdy = \frac{1}{2\pi}\int_{0}^{2\pi}d\theta\int_{0}^{1}dr^2<br>$$<br>也就是说不光是$\Theta$，半径的平方$r^2$，即$S$也是均匀分布的，而且是在0到1上的均匀分布，而且还是独立的（因为上面的概率密度函数可以分开相乘）。</p>
<p>那么在Box–Muller方法中得出的两组正态分布的变量就可以写为<br>$$<br>X = \sqrt{-2\ln S}*\frac{U_3}{\sqrt{S}} \\<br>Y = \sqrt{-2\ln S}*\frac{U_4}{\sqrt{S}}<br>$$<br><a href="https://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01001_source.html#l01639">c++标准函数库</a>里<code>std::normal_distribution</code>用的就是Marsaglia polar method，下面是具体的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_M_saved_available)<span class="comment">//因为一次性可以生成两个正态分布的变量，所以可以利用起来</span></span><br><span class="line">&#123;</span><br><span class="line">  _M_saved_available = <span class="literal">false</span>;</span><br><span class="line">  __ret = _M_saved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  result_type __x, __y, __r2;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    __x = result_type(<span class="number">2.0</span>) * __aurng() - <span class="number">1.0</span>;</span><br><span class="line">    __y = result_type(<span class="number">2.0</span>) * __aurng() - <span class="number">1.0</span>;</span><br><span class="line">    __r2 = __x * __x + __y * __y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (__r2 &gt; <span class="number">1.0</span> || __r2 == <span class="number">0.0</span>);<span class="comment">//筛去单位圆以外以及等于0的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result_type __mult = <span class="built_in">std</span>::<span class="built_in">sqrt</span>(<span class="number">-2</span> * <span class="built_in">std</span>::<span class="built_in">log</span>(__r2) / __r2);</span><br><span class="line">  _M_saved = __x * __mult;</span><br><span class="line">  _M_saved_available = <span class="literal">true</span>;</span><br><span class="line">  __ret = __y * __mult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
</search>
