<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何用均匀分布构造正态分布</title>
    <url>/blog/2020/09/06/constructNormalDistribution/</url>
    <content><![CDATA[<p>这篇文章的问题来源于博客的<a href="https://ziyunge1999.github.io/blog/2020/08/30/randomInitializationVector/">随机初始化单位向量</a>，实际上那篇文章也是在用均匀分布去构造另一种分布。在搜集那篇文章的答案的时候，碰到了“如何用均匀分布构造正态分布”的问题，觉得很有代表性，就记录了下来。</p>
<h1 id="Inverse-Transform-Method-逆变换方法"><a href="#Inverse-Transform-Method-逆变换方法" class="headerlink" title="Inverse Transform Method - 逆变换方法"></a>Inverse Transform Method - 逆变换方法</h1><p>先抛开构造具体的正态分布这个议题，我们先来看看用均匀分布去构造其他分布的一种较为通用的方法。当我们知道了要构造的目标分布的密度函数$f_{X}(x)$，如果你可以求出它的累积分布函数（Cumulative Distribution Function-CFD）$F_{X}(x)$，那么我们就可以用0到1之间的一个均匀分布变量$U(0,1)$去构造这个目标分布。先求出累积分布函数的逆函数，再将均匀分布作为变量输入该逆函数，即$F^{-1}_{X}(U)$，输出就遵循要构造的目标分布了。</p>
<p>这个证明也非常简单，要证明两个随机变量是同分布的，最直接的办法就是证明他们的累积分布函数是相同的。假设随机变量$X$是目标分布，那么就要证明随机变量$Y=F_{X}^{-1}(U)$的累积分布函数也是$F_{X}$。变量$Y$的累积分布函数$F_{Y}$可以写为</p>
<p>$$<br>F_{Y}(x) = P(Y&lt;x) \\<br>F_{Y}(x) = P(F^{-1}_{X}(U)&lt;x)<br>$$</p>
<p>对于不等式$F_{X}^{-1}(U)&lt;x$因为累积分布函数（注意不是概率密度函数）一定是单调递增的，所以这个不等式两边代入$F_{X}(x)$，不等号的方向还是一样的，即</p>
<p>$$<br>F_{X}(F_{X}^{-1}(U)) &lt; F_{X}(x)\\<br>U &lt; F_X(x)<br>$$</p>
<p>所以$F_Y(x)$就可以写为</p>
<p>$$<br>F_Y(x) = P(U&lt;F_X(x))<br>$$</p>
<p>这里的$U$是0到1上的均匀分布，那么$U$小于$F_{X}(x)$的概率就为$(F_X(x)-0)*1$，即表明<br>$$<br>F_Y(x) = F_{X}(x)<br>$$<br>也就是说这两个随机变量的的累积分布函数是一样的，即这两个随机变量是同分布的。</p>
<p>举个例子，假设要构造一个随机变量服从概率密度函数$f_{X}(x) = x^2(x\in(0,\sqrt[3]{3}))$，步骤如下</p>
<ul>
<li>求出累积分布函数$F_{X}(x) = \frac{1}{3}x^3(x\in(0,\sqrt[3]3))$</li>
<li>求出累积分布函数的逆函数为$F_{X}^{-1} = (3x)^{-3}$</li>
<li>用一个0到1的均匀分布的随机变量$U(0,1)$，则变量$(3U)^{-3}$就会服从目标分布</li>
</ul>
<p>代码段如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::uniform_real_distribution&lt;&gt; values &#123;<span class="number">0.0</span>, <span class="number">1.0</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::random_device rd; </span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;; </span><br><span class="line"><span class="keyword">double</span> X = <span class="built_in">pow</span>((<span class="number">3</span> * values(rng)), <span class="number">-3</span>);</span><br></pre></td></tr></table></figure>

<h1 id="构造正态分布变量"><a href="#构造正态分布变量" class="headerlink" title="构造正态分布变量"></a>构造正态分布变量</h1><p>在我搜集到的资料当中，一般有三种方法，分别是The Box–Muller transform，以及它的改良版Marsaglia polar method，还有一种The Ziggurat algorithm。这里主要介绍前两种，因为跟前面介绍的逆变换方法有关。</p>
<h2 id="The-Box–Muller-transform"><a href="#The-Box–Muller-transform" class="headerlink" title="The Box–Muller transform"></a>The Box–Muller transform</h2><p>标准正态分布的概率密度函数为$f(x) = \frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}$，这个函数直接去积分求它的累积分布函数是比较麻烦的，但是我们可以同时构造两个互相独立的标准正态分布变量。比如要构造两个独立的标准正态分布变量$X$和$Y$，那么这两个随机变量的联合概率密度函数$f(x,y)$即为<br>$$<br>f(x,y) = \frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}} *\frac{1}{\sqrt{2\pi}} e^{-\frac{y^2}{2}}\\<br>f(x,y) = \frac{1}{2\pi}e^{-\frac{x^2+y^2}{2}}<br>$$<br>这个联合分布的累积分布函数是好求的，那么它的积分（$I^2$）就为<br>$$<br>\iint_{-\infty} ^{+\infty}\frac{1}{2\pi} e^{-\frac{x^2+y^2}{2}} dxdy<br>$$<br>这是在笛卡尔直角坐标系下的表达，可以转成极坐标下的表达（注意$dxdy$是和$rdrd\theta$等价的，不要忘了那个$r$，忘记的可以看看雅可比矩阵）<br>$$<br>I^{2} = \iint \frac{1}{2\pi}e^{-\frac{r^2}{2}}*rdrd\theta<br>$$<br>我们可以看出，这个被积分函数是跟$\theta$没关系的，也就是说$\theta$和$r$是也是独立的，上述分布可以写成<br>$$<br>I^2 = \int_{0}^{2\pi}\frac{1}{2\pi}d\theta * \int_{0}^{+\infty}re^{-\frac{r^2}{2}}dr<br>$$<br>左边关于$\theta$很好解决，右边的关于$r$单独拿出来，这个原函数也是可以求出来的，这两个变量的累积分布函数即为<br>$$<br>F_R(r) = 1-e^{-\frac{r^2}{2}} \quad r\in(0,+\infty) \\<br>F_{\Theta}(\theta) = \frac{\theta}{2\pi} \quad \theta\in(0,2\pi)<br>$$<br>根据前面说的逆变换方法，这两个变量是可以通过两个0到1的随机变量$U_1$和$U_2$构造出来的，求出上述两个分布函数的逆函数，再代入$U_1$和$U_2$，即可以得到$R$跟$\Theta$两个随机变量<br>$$<br>R = \sqrt{-2\ln(1-U_1)} \\<br>\Theta = 2\pi U_2<br>$$<br>注意我们是要构造$X$和$Y$这两个随机变量，极坐标系跟笛卡尔直角坐标系有如下转换关系<br>$$<br>X = R * \cos(\Theta) \\<br>Y = R * \sin(\Theta)<br>$$<br>即<br>$$<br>X = \sqrt{-2\ln(1-U_1)}*\cos(2\pi U_2) \\<br>Y = \sqrt{-2\ln(1-U_1)}*\sin(2\pi U_2)<br>$$<br>其中因为$U_1$是均匀分布的，也就是说$1-U_1$也是均匀分布，所以可以直接用$U_1$替代，即简化为<br>$$<br>X = \sqrt{-2\ln U_1}*\cos(2\pi U_2) \\<br>Y = \sqrt{-2\ln U_1}*\sin(2\pi U_2)<br>$$</p>
<h2 id="Marsaglia-polar-method"><a href="#Marsaglia-polar-method" class="headerlink" title="Marsaglia polar method"></a>Marsaglia polar method</h2><p>上述的方法还是要计算三角函数，在Marsaglia polar method里就可以略去这个过程。</p>
<p>其实主要问题在这两个三角函数，这是我们不希望有的，那么有没有一种变量的分布刚好是$\cos(2\pi U_2)$或者$\sin(2\pi U_2)$这样的分布呢，可能你的第一想法还是用逆变换方法去做，但是会马上意识到，这样做会陷入一种三角函数的循环。那我们来试一试，假设你要构造的变量是$K=\cos(2\pi U_2)$，那么它的累积分布函数为<br>$$<br>F_K(k) = P(\cos(2\pi U_2)&lt;k)<br>$$<br>如图所示</p>
<img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/1688065e46b7ed736a5a58be388c6a253ee169a8.jpg" width="400px"/>

<p>则上述等式可写为<br>$$<br>F_K(k) = \frac{2\pi - 2\cos^{-1}(k)}{2\pi}<br>$$<br>这个函数的反函数依然是三角函数，并没有产生什么实质性的变化，所以继续用逆函数变换方法去做是取消不掉三角函数的运算的。</p>
<p>Marsaglia polar method是先产生两个在-1到1之间的均匀分布的变量$U_3 U_4$，这样的话在坐标系中就是一个边长为2的正方形，紧接着再剔除那些落在单位圆之外的点，这样就得到了一个在单位圆内均匀分布的点。在这个单位圆内，存在一个均匀分布的变量（注意这个时候的横纵坐标由于筛选，并不服从均匀分布了），那就是极角，这一点很好理解。这个均匀分布极角有个很好的特性，就是它的三角函数值是可以用横纵坐标，也就是之前随机出来的两个变量表示出来。注意这时候的$U_3 U_4$只是为了表示变量值，他们已经失去了均匀分布的特性<br>$$<br>\cos(2\pi U_2) = \cos(\Theta) = \frac{U_3}{\sqrt{U_3^2+U_4^2}}\\<br>\sin(2\pi U_2) = \sin(\Theta) = \frac{U_4}{\sqrt{U_3^2+U_4^2}}<br>$$<br>其实到这里我们已经解决了要计算三角函数的问题，但是我们用了三个均匀分布的变量，即$U_1 U_3 U_4$（$U_1$是0到1的均匀分布，$U_3U_4$是-1到1的均匀分布），这不是我们想要的，那么上面构造出来的单位圆里面，还存不存在一个在0到1之间均匀分布而且相对于$\Theta$独立的变量呢？其实还是有的，就是点的到原点距离的平方$S = U_3^2 + U_4^2$，且$S$跟极角$\Theta$也是独立的。</p>
<p>同样的考虑积分（因为在单位圆里均匀分布，所以被积函数是一个常数$\frac{1}{\pi}$，单位圆面积的倒数），根据雅可比矩阵<br>$$<br>\iint \frac{1}{\pi}dxdy = \frac{1}{\pi}\iint rdrd\theta\\<br>\iint \frac{1}{\pi}dxdy = \frac{1}{\pi}\iint \frac{1}{2}dr^2d\theta \\<br>\iint \frac{1}{\pi}dxdy = \frac{1}{2\pi}\int_{0}^{2\pi}d\theta\int_{0}^{1}dr^2<br>$$<br>也就是说不光是$\Theta$，半径的平方$r^2$，即$S$也是均匀分布的，而且是在0到1上的均匀分布，而且还是独立的（因为上面的概率密度函数可以分开相乘）。</p>
<p>那么在Box–Muller方法中得出的两组正态分布的变量就可以写为<br>$$<br>X = \sqrt{-2\ln S}*\frac{U_3}{\sqrt{S}} \\<br>Y = \sqrt{-2\ln S}*\frac{U_4}{\sqrt{S}}<br>$$<br><a href="https://gcc.gnu.org/onlinedocs/gcc-4.6.0/libstdc++/api/a01001_source.html#l01639">c++标准函数库</a>里<code>std::normal_distribution</code>用的就是Marsaglia polar method，下面是具体的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_M_saved_available)<span class="comment">//因为一次性可以生成两个正态分布的变量，所以可以利用起来</span></span><br><span class="line">&#123;</span><br><span class="line">  _M_saved_available = <span class="literal">false</span>;</span><br><span class="line">  __ret = _M_saved;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  result_type __x, __y, __r2;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    __x = result_type(<span class="number">2.0</span>) * __aurng() - <span class="number">1.0</span>;</span><br><span class="line">    __y = result_type(<span class="number">2.0</span>) * __aurng() - <span class="number">1.0</span>;</span><br><span class="line">    __r2 = __x * __x + __y * __y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (__r2 &gt; <span class="number">1.0</span> || __r2 == <span class="number">0.0</span>);<span class="comment">//筛去单位圆以外以及等于0的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result_type __mult = <span class="built_in">std</span>::<span class="built_in">sqrt</span>(<span class="number">-2</span> * <span class="built_in">std</span>::<span class="built_in">log</span>(__r2) / __r2);</span><br><span class="line">  _M_saved = __x * __mult;</span><br><span class="line">  _M_saved_available = <span class="literal">true</span>;</span><br><span class="line">  __ret = __y * __mult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>概率论与数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>随机初始化单位向量</title>
    <url>/blog/2020/08/30/randomInitializationVector/</url>
    <content><![CDATA[<p>在改MVS的一些算法当中，随机初始化是一个非常常用的步骤。在基于patch match的mvs算法中，需要去构造一个深度平面，这个平面由深度以及平面单位法向量构成。在随机初始化这个平面单位法向量的时候，碰到了一些很有趣的问题以及一些思考，在此以做记录。</p>
<h1 id="一种错误想法"><a href="#一种错误想法" class="headerlink" title="一种错误想法"></a>一种错误想法</h1><p>我相信一拿到这个问题的时候，许多人跟我一样可能会这样做，分别随机在-1到1之间sample出法向量的x，y，z值，然后为了满足单位长度的要求再除以向量的模长。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::random_device rd;</span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dis</span><span class="params">(<span class="number">-1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//get x y z of a vector</span></span><br><span class="line"><span class="keyword">double</span> x = dis(rng);</span><br><span class="line"><span class="keyword">double</span> y = dis(rng);</span><br><span class="line"><span class="keyword">double</span> z = dis(rng);</span><br><span class="line"><span class="keyword">double</span> norm = <span class="built_in">sqrt</span>(x*x + y*y + z*z);</span><br><span class="line">x /= norm;</span><br><span class="line">y /= norm;</span><br><span class="line">z /= norm;</span><br></pre></td></tr></table></figure>

<p>但是稍加思索其实就会发觉这个想法其实是错误的，在独立随机三个坐标值时，其实是在一个以原点为中心的一个2*2*2的立方体中随机取点，这个点在这个立方体里的分布是均匀的，紧接着再将这个点投影到以原点为中心，半径为1的单位球面上。显然这样的投影是不均匀的，因为这个单位球和立方体相切，立方体除了这个单位球还多了四个边角的空间。虽然这个方法不正确，但是我们先画出这种方法最后出来的三坐标分量的概率分布，以下是用用上述方法取了10000个点，三坐标分量的分布直方图</p>
<table>
<thead>
<tr>
<th align="center">x分量</th>
<th align="center">y分量</th>
<th align="center">z分量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/b33fd67365e8e1934ad9a8ec49e93aad06f7b17b.jpg" width="400px"/></td>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/cf8871975facd0fb97e814e3f0289fa79f31d5d4.jpg" width="400px"/></td>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/c4fb56bd1402452188272ff22b3344452ab14ed9.jpg" width="400px"/></td>
</tr>
</tbody></table>
<p>我们可以看到，三个坐标分量的分布都是一样的，但是经过我们这么折腾，原来均匀分布的变量就变成了非均匀分布。</p>
<h1 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h1><p>那么如何去实现呢，其实在前文当中答案已经呼之欲出了，既然我们知道问题在于多出来的四个角，那我们直接把它去掉不就行了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::random_device rd;</span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::uniform_real_distribution&lt;<span class="keyword">double</span>&gt; <span class="title">dis</span><span class="params">(<span class="number">-1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//get x y z of a vector</span></span><br><span class="line"><span class="keyword">double</span> x = dis(rng);</span><br><span class="line"><span class="keyword">double</span> y = dis(rng);</span><br><span class="line"><span class="keyword">double</span> z = dis(rng);</span><br><span class="line"><span class="keyword">double</span> norm = <span class="built_in">sqrt</span>(x*x + y*y + z*z);</span><br><span class="line"><span class="keyword">while</span>(norm &gt; <span class="number">1</span>)&#123;</span><br><span class="line">  x = dis(rng); y = dis(rng); z = dis(rng);</span><br><span class="line">  norm = <span class="built_in">sqrt</span>(x*x + y*y + z*z);</span><br><span class="line">&#125;</span><br><span class="line">x /= norm;</span><br><span class="line">y /= norm;</span><br><span class="line">z /= norm;</span><br></pre></td></tr></table></figure>

<p>下面是按照这种方法的三坐标分量的分布直方图</p>
<table>
<thead>
<tr>
<th align="center">x分量</th>
<th align="center">y分量</th>
<th align="center">z分量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/8c7f64c0efda5fbe8fff66e9b298aa991b3f3304.jpg" width="400px"/></td>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/b6917710a982569eed0a071b57ebe68915fd81ae.jpg" width="400px"/></td>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/d1de1cfddb1bf6fedb99a3a26c1f7d5f11ea324e.jpg" width="400px"/></td>
</tr>
</tbody></table>
<p>居然是均匀分布，也就是说我们初始的想法是对的，这样一个随机分布的向量，三个分量确实也是均匀分布的。这一点也可以用微积分证明。在计算球体表面积时，有以下过程，计算的是一个单位圆（半圆）绕x轴扫过的面积</p>
<img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/9b4f0e6948fe8b3391b2168ac3249d31bb21084e.jpg" width="400px"/>

<p>即球体的表面积可以表示为<br>$$<br>S = \int 2\pi y\sqrt{\Delta x^2 + \Delta y^2} \\<br>S = 2\pi \int_{r}^{r} \sqrt{r^2 - x^2} \sqrt{1 + \frac{\Delta y^2}{\Delta x^2}} dx<br>$$</p>
<p>由$x$和$y$之间的关系$y = \sqrt{r^2-x^2}$可得，$\frac{\Delta y}{\Delta x} = \frac{-x}{\sqrt{r^2 - x^2}}$，将其带入上式可得<br>$$S = 2\pi \int_{-r}^{r} \sqrt{r^2 - x^2} \sqrt{1 + \frac{x^2}{r^2-x^2}} dx \\ S = 2\pi \int_{-r}^{r} r dx$$<br>所以可以看出这个积分其实跟$x$没有关系，换句话说，在$x$的任一取值下，$\Delta x$囊括的球面积都是一样的，所以各个指向均匀分布的单位向量，其三坐标是在-1到1之间均匀分布的。</p>
<h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="高斯分布构造"><a href="#高斯分布构造" class="headerlink" title="高斯分布构造"></a>高斯分布构造</h2><p>和前面的方法差不多的想法，只是这次我们用标准高斯分布（正态分布）来构造三个坐标分量，这样构造出来的点在空间中的状态就类似于电子云，以原点是中心对称的。不过好处在于，这次不用像前述方法去掉在单位球以外的点。接着就和前述一样，将随机出来的点投影到单位球面上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::normal_distribution&lt;&gt; dist; <span class="comment">// mu: 0 sigma: 1</span></span><br><span class="line"><span class="built_in">std</span>::random_device rd;</span><br><span class="line"><span class="built_in">std</span>::default_random_engine rng &#123;rd()&#125;;</span><br><span class="line">plane-&gt;x = <span class="number">1.0f</span> * dist(rng);</span><br><span class="line">plane-&gt;y = <span class="number">1.0f</span> * dist(rng);</span><br><span class="line">plane-&gt;z = <span class="number">1.0f</span> * dist(rng);</span><br><span class="line"><span class="keyword">float</span> norm = sqrtf(plane-&gt;x * plane-&gt;x + plane-&gt;y * plane-&gt;y + plane-&gt;z * plane-&gt;z);</span><br><span class="line">plane-&gt;x = plane-&gt;x / norm;</span><br><span class="line">plane-&gt;y = plane-&gt;y / norm;</span><br><span class="line">plane-&gt;z = plane-&gt;z / norm;</span><br></pre></td></tr></table></figure>

<h2 id="Marsaglia方法"><a href="#Marsaglia方法" class="headerlink" title="Marsaglia方法"></a>Marsaglia方法</h2><p>这种方法较为tricky，我暂时没有想明白具体的数学原理，在这留个坑，希望以后能补上。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> q1, q2, S = <span class="number">2.f</span>;</span><br><span class="line"><span class="keyword">while</span> (S &gt;= <span class="number">1.0f</span>) &#123;</span><br><span class="line">	q1 = curand_between(ls, <span class="number">-1.0f</span>, <span class="number">1.0f</span>); <span class="comment">//一个cuda的随机取值函数，这里是随机从-1到1取值，意会就好不用在意细节</span></span><br><span class="line">  q2 = curand_between(ls, <span class="number">-1.0f</span>, <span class="number">1.0f</span>); </span><br><span class="line">  S = q1 * q1 + q2 * q2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> sq = sqrtf(<span class="number">1.0f</span> - S);</span><br><span class="line">plane-&gt;x = <span class="number">2.0f</span> * q1 * sq;</span><br><span class="line">plane-&gt;y = <span class="number">2.0f</span> * q2 * sq;</span><br><span class="line">plane-&gt;z = <span class="number">1.0f</span> - <span class="number">2.0f</span> * S;</span><br></pre></td></tr></table></figure>

<h1 id="其他错误的尝试"><a href="#其他错误的尝试" class="headerlink" title="其他错误的尝试"></a>其他错误的尝试</h1><h2 id="随机取值两个欧拉角构造向量"><a href="#随机取值两个欧拉角构造向量" class="headerlink" title="随机取值两个欧拉角构造向量"></a>随机取值两个欧拉角构造向量</h2><p>在得到上述正解之前，其实还误碰了一些错误的构造方式，放在这里以提醒。</p>
<p>在单位球上的向量，自然而然会想到用欧拉角来构造，去掉一个没用的row角，剩下的pitch和yaw角就够用了。两个角度分别用alpha和beta来表示，如示意图，alpha的取值范围是$(0,2\pi)$，beta的取值范围是$(-\frac{\pi}{2},\frac{\pi}{2})$。</p>
<img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/b7dbedd2f2ea43bfb6e6491e3fcda870cb47e450.jpg" width="400px" />

<p>那么这个单位向量就构造出来了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> Alpha, Beta;</span><br><span class="line">Alpha = curand_between(ls, <span class="number">0f</span>, <span class="number">2</span>*M_PI);</span><br><span class="line">Beta = curand_between(ls, -M_PI/<span class="number">2.0f</span>, M_PI/<span class="number">2.0f</span>);</span><br><span class="line">plane-&gt;x = <span class="number">1.0f</span> * <span class="built_in">cos</span>(Beta) * <span class="built_in">sin</span>(Alpha);</span><br><span class="line">plane-&gt;y = <span class="number">1.0f</span> * <span class="built_in">cos</span>(Beta) * <span class="built_in">cos</span>(Alpha);</span><br><span class="line">plane-&gt;z = <span class="number">1.0f</span> * <span class="built_in">sin</span>(Beta);</span><br></pre></td></tr></table></figure>

<p>首先，从结果上看，得出来的三坐标分量就是错误的</p>
<table>
<thead>
<tr>
<th align="center">x分量</th>
<th align="center">y分量</th>
<th align="center">z分量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/36001d417f9f6311a38498e63f9a1b20119d7110.jpg" width="400px"/></td>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/48504e0ca524dedde0eb07296da8c88e7369ea25.jpg" width="400px"/></td>
<td align="center"><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/7fde980139758f5a6e5471a2da1458bfadae0d24.jpg" width="400px"/></td>
</tr>
</tbody></table>
<p>其次，还是可以通过确认单位alpha单位beta围的面积是否是不变的，来确认这样的取值是能够构造指向均匀分布的单位向量。答案是否定的，可以很清楚地看到，当alpha固定，beta越靠近0，$\Delta alpha, \Delta beta$围的面积越大。</p>
]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>概率论与数理统计</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Stash和Git Rebase的简单使用</title>
    <url>/blog/2020/09/20/gitStashAndGitRebase/</url>
    <content><![CDATA[<p>在实习当中经常用到Git，有碰到一些问题在此记录一下，具体Git入门教程可以参考廖雪峰写的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">教程</a>，这里提及一下我觉得挺好用的两个命令<code>git stash</code>和<code>git rebase</code>。再说这两个命令之前，先来回顾一下Git的各个工作区域。</p>
<h1 id="Git的工作区域和文件状态"><a href="#Git的工作区域和文件状态" class="headerlink" title="Git的工作区域和文件状态"></a>Git的工作区域和文件状态</h1><img src="https://pic.downk.cc/item/5f786c33160a154a67120c8e.png">

<blockquote>
<p><strong>Workspace：</strong> 工作区，就是你平时存放项目代码的地方</p>
<p><strong>Index / Stage：</strong> 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p>
<p><strong>Repository：</strong> 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p>
<p><strong>Remote：</strong> 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p>
</blockquote>
<img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/e1fd9e2c2232a653c9e864bb226a785be6a4ad9b.png">

<blockquote>
<p><strong>Untracked:</strong>  未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</p>
<p><strong>Unmodify:</strong>  文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</p>
<p> <strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过,  返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</p>
<p><strong>Staged:</strong> 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</p>
</blockquote>
<p>以上内容copy自<a href="https://www.cnblogs.com/qdhxhz/p/9757390.html">这篇文章</a>。这里主要要清楚的是，workspace并不指的是你当前文件夹的所有文件，而是tracked的文件，如果一份新建的文件处于Untracked的状态，那么该文件是不参与版本控制的，后续的<code>git stash</code>操作也自然对他不会起作用。</p>
<h1 id="Git-Stash"><a href="#Git-Stash" class="headerlink" title="Git Stash"></a>Git Stash</h1><p>假设你现在正在开发一套代码，你也已经有了好几个commit或者是有了好几个版本，这个时候你的上司突然叫你切回原来的稳定版本给别人看一下稳定版本的效果。当然你可以直接<code>git commit</code>当前的工作区，提交一个commit，但是你当前的工作区并不是一个阶段性的小成果，你也不想提交这个从而产生一个没有太多参考价值的trash commit，那么这时<code>git stash</code>就是给你的良药。他的作用是<strong>将你当前的工作区（workspace）和暂存区（Index）打包存好</strong>。</p>
<p>现在我们开始实验，首先新建个文件夹<code>learnGit</code>，然后用以下指令初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>接着我们创建我们的第一个文件夹<code>test1.txt</code>，并往里面写入一些东西</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch test1.txt</span><br><span class="line">echo &quot;This is test1.txt&quot; &gt;&gt; test1.txt</span><br></pre></td></tr></table></figure>

<p>我们先提交这个作为第一个commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>

<p>我们按照相同方式再次提交第二个commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;Line 2 for test1.txt&quot; &gt;&gt; test1.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;second commit&quot;</span><br></pre></td></tr></table></figure>

<p>这时候你接着工作，给<code>test1.txt</code>增加了第三行，并且将更改放到了暂存区；给<code>test1.txt</code>增加了第四行，还没有放到暂存区；新建了一个新文件叫<code>test2.txt</code>，并且给它写了第一行，还没有track这个文件。以上活动为以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">给test1.txt增加第三行，并放到暂存区</span></span><br><span class="line">echo &quot;Line 3 for test1.txt&quot; &gt;&gt; test1.txt</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">给test1.txt增加第四行，还没有放到暂存区</span></span><br><span class="line">echo &quot;Line 4 for test1.txt&quot; &gt;&gt; test1.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建test2.txt，并写入第一行</span></span><br><span class="line">touch test2.txt</span><br><span class="line">echo &quot;This is test2.txt&quot; &gt;&gt; test2.txt</span><br></pre></td></tr></table></figure>

<p>这个时候使用<code>git status</code>查看一下当前git状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   test1.txt</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   test1.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        test2.txt</span><br></pre></td></tr></table></figure>

<p>上面三个操作，分别对应着三种文件状态，第一种是已经被放到了暂存区，但还未提交；第二种是更改了还没有放进暂存区，但是文件本身是被track的；第三种就是文件都还未加入到git管理。这三种也典型地代表了几种平时会遇到的几种文件状态。这时候你的上司让你回到第一个commit，想看看那个稳定版本的效果，但是你不想提交当前的，因为什么都还没改完，我们就可以用<code>git stash</code>储存当前的更改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash save &quot;first stash&quot;</span><br></pre></td></tr></table></figure>

<p>输出为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Saved working directory and index state On master: first stash</span><br></pre></td></tr></table></figure>

<p>其实看到这行的时候，你就应该意识到问题就出现了，你的<code>test2.txt</code>并没有被track，所以理论上它是没有被存进去的。使用<code>git status</code>查看一下当前的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        test2.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>

<p>确实如你所担心的那样，当前的状态并不干净，<code>test2.txt</code>还在这里，而对<code>test1.txt</code>的两个更改已经消失了（被存进去了），你还是不能这时候回到以前的commit。所以我们先把刚刚储存的弹出，track<code>test2.txt</code>文件，再存进去。先用<code>git stash list</code>看看存了哪些</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stash@&#123;0&#125;: On master: first stash</span><br></pre></td></tr></table></figure>

<p>如果你之前没有存其他的话，前一个的存储标号应为<code>0</code>，我们用<code>git stash pop stash@&#123;NUM&#125;</code>将其弹出，<code>NUM</code>填写你要弹出的stash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash pop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<p>现在的工作区就是你存之前的状态了</p>
<blockquote>
<p>stash的使用方法，除了用<code>git stash pop</code>之外还可以用<code>git stash apply</code>，使用方法类似，正如名字所描述的那样，<code>pop</code>直接会将你的stash弹出，而<code>apply</code>则使用当前stash之后还会保留存的stash。</p>
</blockquote>
<p>这时候我们用<code>git status</code>查看一下当前的状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   test1.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        test2.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p>可以看到不一样的在于，之前放到暂存区的<code>test1.txt</code>的第三行，现在也在工作区（workspace）了。</p>
<p>接下来，我们还来制作stash，将所有的更改放到暂存区，然后再存储stash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git stash save &quot;first stash&quot;</span><br></pre></td></tr></table></figure>

<p>用<code>git status</code>查看一下当前状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>搞定，就像你什么更改都没做一样，回到了之前的状态，这时候你就可以开心地<code>checkout</code>到其他的提交或者分支了</p>
<h1 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h1><p>在实习的过程中，碰到了一个很尴尬的问题，我用的是前同事的电脑，在提交修改的时候还没把本机的作者名和邮箱改过来，用的还是前同事的，但是他已经离职了，也就导致那一份提交push不到远程仓库里。这时候就要用<code>git rebase</code>修改以前的提交了。</p>
<p>还是用前面的Git工作区，用<code>git log</code>查看提交过的commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">commit fff69d75f45e1e1689c19d0c12bda7c93584a92f (HEAD -&gt; master)</span><br><span class="line">Author: Ziyun Ge &lt;ziyunge1999@gmail.com&gt;</span><br><span class="line">Date:   Sat Oct 3 18:04:35 2020 +0800</span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit 91496e19a37101cc5ff7e3920c4add1bd926e57b</span><br><span class="line">Author: Ziyun Ge &lt;ziyunge1999@gmail.com&gt;</span><br><span class="line">Date:   Sat Oct 3 18:02:09 2020 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure>

<p>假设我们要更改第二个提交，也就是<code>second commit</code>这一次，将它的作者改为<code>geziyun</code>，邮箱改为<code>ziyun_ge@foxmail.com</code>。</p>
<p>先使用<code>git rebase -i &lt;COMMIT_ID&gt;</code>，这里的<code>&lt;COMMIT_ID&gt;</code>需要选第一次提交的，它显示的其实是<code>&lt;COMMIT_ID&gt;</code>之后的提交。可以看到以下交互窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pick fff69d7 second commit</span><br><span class="line"></span><br><span class="line"># Rebase 91496e1..fff69d7 onto 91496e1 (1 command)</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick &lt;commit&gt; &#x3D; use commit</span><br><span class="line"># r, reword &lt;commit&gt; &#x3D; use commit, but edit the commit message</span><br><span class="line"># e, edit &lt;commit&gt; &#x3D; use commit, but stop for amending</span><br><span class="line"># s, squash &lt;commit&gt; &#x3D; use commit, but meld into previous commit</span><br><span class="line"># f, fixup &lt;commit&gt; &#x3D; like &quot;squash&quot;, but discard this commit&#39;s log message</span><br><span class="line"># x, exec &lt;command&gt; &#x3D; run command (the rest of the line) using shell</span><br><span class="line"># b, break &#x3D; stop here (continue rebase later with &#39;git rebase --continue&#39;)</span><br><span class="line"># d, drop &lt;commit&gt; &#x3D; remove commit</span><br><span class="line"># l, label &lt;label&gt; &#x3D; label current HEAD with a name</span><br><span class="line"># t, reset &lt;label&gt; &#x3D; reset HEAD to a label</span><br><span class="line"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以看到第二次提交的的Commit ID，我们需要将第一行的<code>pick</code>改为<code>edit</code>，修改方式就跟vim用法一致，接着保存退出。</p>
<p>接着来更改作者和邮箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit --amend --author=&quot;geziyun &lt;ziyun_ge@foxmail.com&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>这里我们先暂停一下，看一下这一步做了什么操作。<code>git commit</code>肯定是提交了一个commit，但是是哪里提交呢，可以用<code>git log</code>查看一下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">commit 90b922390a3fb62a9bc8e5af54e8a7a83f9a08a4 (HEAD)</span><br><span class="line">Author: geziyun &lt;ziyun_ge@foxmail.com&gt;</span><br><span class="line">Date:   Sat Oct 3 18:04:35 2020 +0800</span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit 91496e19a37101cc5ff7e3920c4add1bd926e57b</span><br><span class="line">Author: Ziyun Ge &lt;ziyunge1999@gmail.com&gt;</span><br><span class="line">Date:   Sat Oct 3 18:02:09 2020 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure>

<p>可以有趣地发现，第一次提交还是一样的，但是第二次提交的作者和邮箱都变了，最重要的是第二次提交的Commit ID也变了，也就是说这并不是真正意义上的“第二次提交”。为了更好的阐述这个问题，如果你使用的是VSCode的话，可以下载安装一个插件Git Graph。</p>
<img src="https://pic.downk.cc/item/5f78652b160a154a671082cb.png">

<p>可以看到我们当前的这次commit其实是在<code>first commit</code>上的另一个分支，原来的<code>second commit</code>在另一个分支（还可以看到之前我们保存的stash）</p>
<p>接着我们使用以下指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<p>可以看到master指针已经指向了你新的提交，注意这里还可以看到老的<code>second commit</code>，这是因为之前的stash是在老的<code>second commit</code>上修改的。你可以使用<code>git stash pop</code>弹出之前储存的stash（没有指定哪个stash的话就默认会弹出最近的一个stash），由于你只改了作者和邮箱，所以你还是不用解冲突。然后你可以惊喜地发现老的<code>second commit</code>不见了，是因为它没有在哪个分支，所以就不显示出来了。如下图，这样我们的作者和邮箱就顺利修改完毕了，可以愉快地push到远程仓库了。</p>
<img src="https://pic.downk.cc/item/5f786b88160a154a6711e6ae.jpg">

<p>根据上述的描述，其实你大致也可以猜出，<code>git rebase</code>实际上新建一个暂时的分支，然后再那上面修改一些东西（不仅仅可以修改commit的作者，你还可以修改代码细节），最后再和之前的master分支进行合并，当然如果必要的话你还需要解冲突使得合并顺利。</p>
]]></content>
      <categories>
        <category>随笔记录</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如果情绪会说话 | 近几年瞎听的歌2018-2021</title>
    <url>/blog/2021/06/21/Music-recommendation-in-the-past-three-years/</url>
    <content><![CDATA[<p>不知道为啥突然一时兴起想写写最近听的一些歌，由于和以前的风格截然不同，所以想着记录记录总是好的。这些歌跨度比较大，大致是有些吵到释放，有些安静感性到emo，也大致描述这几年的情绪的起伏和纠结。所有的外链都是用网易云的，可能外网的朋友不能直接往也点开了，以及由于版权的问题，一些歌曲也不允许生成外链。</p>
<p>18年中的时候，我前往美国交换，到了美国因为版权的问题，国内的主流的音乐APP都不能使用，AppleMusic虽然说可以，但是当时没有Macbook，所以pc端就是个问题，作为耳机深度上瘾患者，也不得不每个月充很多大洋买了Spotify的会员。没想到用户体验极好，加之恰逢那几年国内音乐版权意识开始兴起，在国内常常要充很多个音乐APP的会员才能听全自己的曲库，即使回国了我还是用着Spotify，一直到现在。</p>
<p>按照大类来说，这几年听的歌可以大致分为这些：<strong>HipHop&amp;Rap&amp;Trap</strong>，<strong>Rock</strong>，<strong>R&amp;B</strong>，<strong>EDM</strong>以及一些我也不知道具体应该分类到哪些的歌曲。由于自己确实对音乐不大了解，所以很多东西都是感性的体会，也和我个人的经历很有关系，有纰漏和说错的地方也非常正常，见谅啦。</p>
<h1 id="潮流可能就是HipHop吧"><a href="#潮流可能就是HipHop吧" class="headerlink" title="潮流可能就是HipHop吧"></a>潮流可能就是HipHop吧</h1><p>我曾经有段时间狭隘地觉得，现在这些潮流文化，有哪些不是嘻哈出来的呢？从宽衣宽裤oversize的old school穿衣风格，到前几年总觉得压低鸭舌帽就能来上几段的rap；从本身分支就很多的街舞，到现在随便在歌曲里加一段808鼓就能成为Trap风格的单曲。这些文化有些已经大到独立出HipHop这个大类，有些坚挺还依然在发光发热，而且似乎永远都有新的惊喜。这也是我一直喜欢北美音乐圈的原因，总是能够杂交许多种风格，直到发展出独立的分支。</p>
<h2 id="如果爱会上瘾的Trap"><a href="#如果爱会上瘾的Trap" class="headerlink" title="如果爱会上瘾的Trap"></a>如果爱会上瘾的Trap</h2><p>作为全球的音乐技术的前沿的美国，Auto-Tune这项技术现在也在北美被玩的如火纯青，且现在也越来越出现</p>
<h1 id="北美的东亚情绪表达"><a href="#北美的东亚情绪表达" class="headerlink" title="北美的东亚情绪表达"></a>北美的东亚情绪表达</h1><p>作为文化大舞台的北美，怎么会少了亚裔的身影。东亚情绪只是我一种较为stereotype的描述，泛指一些非常感性或者说难以捉摸的内敛的一些情绪，实际上以下推荐的歌曲许多都是东南亚的出身的歌手，所以不用太在意地域限制。其实作为典型的东亚人的我来说，是非常吃这一套风格的，有着北美非常一线的作曲技术，加上东亚文化里特有含蓄与内敛，可以说几乎是为喜欢北美音乐圈的国人量身定制的风格。</p>
<h2 id="88Rising-一等一的北美亚裔厂牌"><a href="#88Rising-一等一的北美亚裔厂牌" class="headerlink" title="88Rising - 一等一的北美亚裔厂牌"></a>88Rising - 一等一的北美亚裔厂牌</h2><p>如果说北美的东亚情绪表达不说88Rising的话，那我感觉基本上就是没说到点子上。可以这么说，88Rising可以称得上是这几年听歌发现的一大宝贝。</p>
<p>88Rising主要的成员有Rich Brian，NIKI和Joji（其实Higher Brothers也算，但是由于风格感觉不是特别相似，也很少听，所以暂且不说啦）。</p>
<h3 id="Rich-Brian-印度尼西亚的网恋教父"><a href="#Rich-Brian-印度尼西亚的网恋教父" class="headerlink" title="Rich Brian - 印度尼西亚的网恋教父"></a>Rich Brian - 印度尼西亚的网恋教父</h3><p>Rich Brian早期其实是油管的搞笑博主，有些夸张的沙雕视频现在看来颇有点快手的风格。他的第一张单曲是Dat $tick，那时候的他的艺名还是叫Rich Chigga。Chigga这个单词其实就是N word的变体，加上Brian本身是华裔Chinese，Chi和gga结合就是Chigga了，正如所有的黑人如果叫自己叫N word实际上是正常，那么按照这个道理华裔叫自己Chigga似乎也是正常的，但是我不喜欢这样的跟风的变体，再加之对于黑人群体来说实在是非常有争议的一种变体，所以后面他就改名为了Brian。扯回他的这首歌来说，这首歌是当时很典型的流行的Trap风格的歌曲，808鼓，一堆不知道在讲啥歌词，以及没有太多flow和punchline可言的东西，是一个很典型的听着很上头，听完就丢弃的Trap。但是不得不说但从Trap这个类别来说，这首歌是非常成功的，毕竟上头。这首歌火离不开油管的各种reaction视频的传播，Brian为这首歌自己拍的MV颇有种你在纽约街头会被黑人兄弟硬塞的廉价专辑MV。</p>
<p><img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/0f70148216774611c01d290450a1f3fdf6ea126c.jpg" alt="Dat $tick"></p>
<p>在MV里，一个亚裔面孔穿着粉红色的polo衫，斜挎一个小包，说着莫名巧妙的但是拽拽的歌词，这种画面的不协调感也间接地成就了Brian，也让他着实火了一把。</p>
<p>但是真正我喜欢的风格Brian的风格还是要从他加入88Rising开始，我真正开始觉得Brian非常有意思的专辑《The Sailor》。先推荐一首我最喜欢的《Drive Safe》</p>
<p><em>Drive Safe - Rich Brian</em></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1380104337&auto=0&height=66"></iframe>

<p>歌曲里Brian一改原来暴躁的rapper的形象，用自己低沉略微沙哑的声线诉说着自己的故事。不得不说这种反差感相较于一般的抒情系rapper别有一种浪子回头的浪漫感。</p>
<blockquote>
<p>Feeling left out from the pack you gotta go rogue</p>
<p>5 years from now will this even matter you hope</p>
<p>You don’t know where to go, construction every turn up on the road</p>
<p>Live life thinkin why it’s goin so slow</p>
<p>Lookin at the clock wonderin why momma’s not home, you waited way too long, you notice in a pattern in your home</p>
</blockquote>
<p>这是歌词的前五句，当时的我也正处于我成年之后第一个也是感觉最强烈的低谷期，一段不了了之的感情，努力了三四年准备出国却因为自己的情绪问题不得不gap，准备的计划拖延也间接导致和父母的摩擦，只身来到本不应该前往的北京，这些种种也间接导致19年下半年的略微抑郁的倾向，这首歌的出现，或者说这张专辑的出现几乎成了我每天堵住耳朵的良药。我所追求的是什么呢，我想要的生活是什么呢，我要怎么样才能逃离，我每天总是被这些无端的情绪填满。<code>You don’t know where to go, construction every turn up on the road</code>，每天坐在从实验室回家的公交上，看着海淀区破败灰暗的像是三线县城的街景，熙熙攘攘的BBA起步的中高档车，从清华西门排到清华附中的门口接他们的孩子，一个没有感觉麻木的男生坐在公交窗前。副歌的部分几乎完美的诠释当时的心境</p>
<blockquote>
<p>All these thoughts I have in my head</p>
<p>got me blinded from the sunset</p>
<p>I’m tryin hard to stop the rain</p>
<p>Cuz smilin doesn’t feel the same</p>
</blockquote>
<p>我也知道自己的情况是不对的，但是就像歌词里Brian努力想停却停不下的雨，大量的想法和情绪每天都遮住回家路上的黄昏晚霞。</p>
<img src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/ac2e99f665e8ffec4bbf27bba4612b69a313998d.jpg" width="500px"/>

<p>Brian是温柔的，这首歌似乎是写给他自己的一段恋情（网恋？），即使发生了这么多事，他还是依然想轻声说一句“Drive Safe”。</p>
<p>除此之外，这张专辑中，另一首强推就是《100 Degrees》</p>
<p>100 Degrees - Rich Brian</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1380100797&auto=0&height=66"></iframe>

<p>相比于《Drive Safe》的沉郁，《100 Degrees》颇有种走出来的感觉，一些Trap风格的鼓点带点稍微轻快的节奏，100 Degrees的温度都挽回不来，还是过好自己最好，Move On吧。</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
</search>
